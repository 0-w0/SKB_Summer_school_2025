# --- ШАГ 1: ПОДКЛЮЧЕНИЕ БИБЛИОТЕК И ЗАГРУЗКА ДЕТЕКТОРА ---
import cv2

# Загружаем предобученный классификатор для поиска лиц.
# Этот XML-файл - это и есть наш "Каскад Хаара", который хранит все признаки.
# Убедитесь, что файл haarcascade_frontalface_default.xml лежит в той же папке!
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

# --- ШАГ 2: ПОДКЛЮЧЕНИЕ К ВЕБ-КАМЕРЕ ---
# cv2.VideoCapture(0) означает "подключиться к основной веб-камере" (индекс 0).
# Если у вас несколько камер, можно попробовать 1, 2 и т.д.
cap = cv2.VideoCapture(0)

# Проверяем, удалось ли подключиться к камере
if not cap.isOpened():
    print("Ошибка: не удалось открыть веб-камеру.")
    exit()

# --- ШАГ 3: БЕСКОНЕЧНЫЙ ЦИКЛ ОБРАБОТКИ ВИДЕО ---
# while True: - это наш "конвейер", который будет работать, пока мы его не остановим.
while True:
    # 1. Считываем один кадр (картинку) с камеры.
    # ret - это флаг, True если кадр считан успешно, False если нет.
    # frame - это сам кадр, наша обычная BGR-картинка.
    ret, frame = cap.read()
    if not ret:
        print("Не удалось получить кадр с камеры!")
        break # Если кадр не получен, выходим из цикла.

    # 2. Для ускорения работы детектора, переводим кадр в черно-белый.
    # Каскаду Хаара не нужен цвет, ему важны только перепады яркости.
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # 3. Запускаем сам процесс детекции.
    # detectMultiScale находит все лица на черно-белом кадре.
    # Результат `faces` - это список найденных лиц.
    # Каждое лицо - это [x, y, w, h] (координаты левого верхнего угла, ширина и высота).
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # 4. Рисуем прямоугольники вокруг каждого найденного лица.
    # Мы проходимся по списку `faces` и для каждого лица `(x, y, w, h)`...
    for (x, y, w, h) in faces:
        # ...рисуем синий прямоугольник на ЦВЕТНОМ кадре `frame`.
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

    # 5. Показываем результат на экране.
    # cv2.imshow() создает окно с названием 'Video' и показывает в нем наш кадр.
    cv2.imshow('Video', frame)

    # 6. Ждем нажатия клавиши.
    # cv2.waitKey(1) ждет 1 миллисекунду.
    # Если за это время нажата клавиша 'q', мы выходим из цикла.
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# --- ШАГ 4: ОСВОБОЖДЕНИЕ РЕСУРСОВ ---
# Когда мы вышли из цикла (нажали 'q'), нужно "отпустить" камеру и закрыть все окна.
cap.release()
cv2.destroyAllWindows()

# ЗАДАНИЯ
# 1. Изменить цвет рамки
# 2. Изменить толщину рамки
# 3. Добавить подпись
#
# 4. Поменять параметр minNeighbors, что происходит?
# 5. Поменять параметр minSize, что происходит?
#
# 6. Размыть найденное лицо
# 7. Заменить лицо другой картинкой
#
# 8. Добавить нахождение глаз
